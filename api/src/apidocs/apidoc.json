{
  "openapi": "3.0.2",
  "info": {
    "title": "FlowKaizenRCM API",
    "version": "0.0.0"
  },
  "components": {
    "responses": {
      "UnauthorizedError": {
        "description": "Authorization key is invalid or missing",
        "headers": {
          "WWW_Authenticate": {
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "x-auth-token": {
        "type": "apiKey",
        "name": "x-auth-token",
        "in": "header"
      },
      "x-api-key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    },
    "schemas": {
      "ClaimAction": {
        "type": "object",
        "properties": {
          "stepId": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "actionType": {
            "type": "string",
            "enum": [
              "button",
              "value"
            ],
            "nullable": true
          },
          "expires": {
            "type": "string",
            "nullable": true
          },
          "activeTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "earnedTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "WorkflowClaim": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "claimId": {
            "type": "string"
          },
          "workflowId": {
            "type": "string"
          },
          "state": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClaimAction"
            }
          },
          "currentType": {
            "type": "string",
            "enum": [
              "empty",
              "open",
              "done",
              "andon",
              "error",
              "deferred"
            ]
          },
          "start": {
            "type": "string"
          }
        }
      },
      "Session": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "startTime": {
            "type": "string"
          },
          "endTime": {
            "type": "string"
          }
        }
      },
      "Setting": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "UserRole": {
        "type": "string",
        "enum": [
          "",
          "operator",
          "leader",
          "admin"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "nullable": true
          },
          "sub": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "email_verified": {
            "type": "boolean",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "nickname": {
            "type": "string",
            "nullable": true
          },
          "picture": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "nullable": true
          },
          "last_ip": {
            "type": "string",
            "nullable": true
          },
          "last_login": {
            "type": "string",
            "nullable": true
          },
          "last_password_reset": {
            "type": "string",
            "nullable": true
          },
          "login_count": {
            "type": "string",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "nullable": true
          },
          "locale": {
            "type": "string",
            "nullable": true
          },
          "app_metadata": {
            "type": "object",
            "properties": {
              "role": {
                "$ref": "#/components/schemas/UserRole"
              }
            },
            "nullable": true
          },
          "user_metadata": {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string",
                "nullable": true
              }
            },
            "nullable": true
          }
        }
      },
      "StepAction": {
        "type": "object",
        "properties": {
          "stepId": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "nonBlockable": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "WorkflowStep": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "info": {
            "type": "string",
            "nullable": true
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "valueType": {
            "type": "string",
            "nullable": true
          },
          "nextActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepAction"
            }
          },
          "stepType": {
            "type": "string",
            "enum": [
              "",
              "andon",
              "error",
              "deferred"
            ],
            "nullable": true
          },
          "cycleTime": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "WorkflowStatus": {
        "type": "string",
        "enum": [
          "pending",
          "active",
          "inactive"
        ]
      },
      "Workflow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "version": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "start": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/WorkflowStatus"
          },
          "payor": {
            "type": "string",
            "nullable": true
          },
          "nextActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepAction"
            },
            "nullable": true
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowStep"
            }
          }
        }
      },
      "WorkflowUsage": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          },
          "currentType": {
            "type": "string"
          },
          "workflowId": {
            "type": "string"
          }
        }
      }
    }
  },
  "security": [
    {
      "x-auth-token": []
    }
  ],
  "paths": {
    "/api/emr": {
      "post": {
        "tags": [
          "emr"
        ],
        "summary": "POST a workflowclaim to the database",
        "description": "This endpoint is used for EMR integration. It will update the workflowclaim in the database based on the action provided",
        "requestBody": {
          "description": "Workflowclaim that needs to be updated in the database",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "claimId": {
                    "type": "string"
                  },
                  "workflowId": {
                    "type": "string"
                  },
                  "action": {
                    "type": "string",
                    "enum": [
                      "add",
                      "end",
                      "andon",
                      "andoff",
                      "reset",
                      "open"
                    ]
                  },
                  "note": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "x-api-key": []
          },
          {
            "x-auth-token": []
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow was posted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowClaim"
                }
              }
            }
          }
        }
      }
    },
    "/api/images/{imageName}": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "GET the image by image name",
        "description": "gets the image from the database based on the image name provided",
        "parameters": [
          {
            "in": "path",
            "name": "imageName",
            "description": "The name of the image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to image location",
            "headers": {
              "location": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "location": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Image does not exist"
          }
        }
      },
      "delete": {
        "tags": [
          "images"
        ],
        "summary": "DELETE an image based on image name",
        "description": "Deletes an image from the database based on the image name provided",
        "parameters": [
          {
            "in": "path",
            "name": "imageName",
            "description": "The name of the image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/images/": {
      "post": {
        "tags": [
          "images"
        ],
        "summary": "POST the image to the database",
        "description": "Adds the image to the database based on the image name provided",
        "requestBody": {
          "description": "Image that needs to be added in the database",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filedata": {
                    "type": "string"
                  },
                  "filename": {
                    "type": "string"
                  },
                  "filetype": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "location": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Filename already exists"
          },
          "413": {
            "description": "Image size is too big, you can upload images up to 250kB"
          }
        }
      }
    },
    "/api/session": {
      "get": {
        "tags": [
          "session"
        ],
        "summary": "Get the session by Id",
        "description": "Returns a single Session",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "ID of the session to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "session"
        ],
        "summary": "POST a session to the database",
        "description": "Session that needs to be added to the database",
        "requestBody": {
          "description": "Session that needs to be added to the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Session"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        }
      }
    },
    "/api/sessions": {
      "get": {
        "tags": [
          "sessions"
        ],
        "summary": "Gets all of the sessions",
        "description": "Returns sessions that are specified by the query string",
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "description": "ID of the user for the sessions",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "minStart",
            "description": "The minimum starting time for the sessions",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxStart",
            "description": "The maximum starting time for the sessions",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "minEnd",
            "description": "The minimum ending time for the sessions",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxEnd",
            "description": "The maximum ending time for the sessions",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/setting": {
      "get": {
        "tags": [
          "setting"
        ],
        "summary": "Get the setting by Id",
        "description": "Returns a single setting",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "ID of the setting to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "setting"
        ],
        "summary": "POST a setting to the database",
        "description": "Setting that needs to be added to the database",
        "requestBody": {
          "description": "Setting that needs to be added to the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Setting"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            }
          }
        }
      }
    },
    "/api/settings": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Gets all of the settings",
        "description": "Returns settings that are specified by the query string",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "ID of the settings",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "value",
            "description": "The value of the settings",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Setting"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the current user",
        "description": "Returns the current logged in user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "PATCH a user in the database",
        "description": "user that needs to be patched in the database",
        "requestBody": {
          "description": "user that needs to be patched in the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all of the users",
        "description": "Returns all of the users",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/workflow": {
      "get": {
        "tags": [
          "workflow"
        ],
        "summary": "Get the workflow by ID",
        "description": "Returns a single workflow",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "ID of the workflow to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "workflow"
        ],
        "summary": "POST a workflow to the database",
        "description": "workflow that needs to be added to the database",
        "requestBody": {
          "description": "Workflow that needs to be added to the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workflow"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Workflow was posted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            }
          }
        }
      }
    },
    "/api/workflowclaim": {
      "get": {
        "tags": [
          "workflowclaim"
        ],
        "summary": "Get the workflowclaim by claimId and workflowId",
        "description": "Returns a single workflowclaim",
        "parameters": [
          {
            "in": "query",
            "name": "claimId",
            "description": "the claim id of the workflowclaim to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "workflowId",
            "description": "the workflow id of the workflowclaim to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowClaim"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "workflowclaim"
        ],
        "summary": "POST a workflowclaim to the database",
        "description": "workflowclaim that needs to be added to the database",
        "requestBody": {
          "description": "Workflowclaim that needs to be added to the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowClaim"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Workflow was posted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowClaim"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "workflowclaim"
        ],
        "summary": "PATCH a workflowclaim in the database",
        "description": "workflowclaims can have their state patched through this route",
        "requestBody": {
          "description": "Workflowclaim properties that are needed for the patch to be successful",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "claimId": {
                    "type": "string"
                  },
                  "workflowId": {
                    "type": "string"
                  },
                  "currentType": {
                    "type": "string",
                    "enum": [
                      "empty",
                      "open",
                      "done",
                      "andon",
                      "error",
                      "deferred"
                    ]
                  },
                  "claimAction": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ClaimAction"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowClaim"
                }
              }
            }
          }
        }
      }
    },
    "/api/workflowclaims": {
      "get": {
        "tags": [
          "workflowclaims"
        ],
        "summary": "Gets all of the workflowclaims",
        "description": "Returns workflowclaims that are specified by the query string",
        "parameters": [
          {
            "in": "query",
            "name": "claimId",
            "description": "The claim Id for the workflowclaims",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "workflowId",
            "description": "The workflow Id for the workflowclaims",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "minBegin",
            "description": "The minimum creation time for the workflowclaims",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxBegin",
            "description": "The maximum creation time for the workflowclaims",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "minTs",
            "description": "The minimum timestamp for the workflowclaims",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxTs",
            "description": "The maximum timestamp for the workflowclaims",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "action",
            "description": "The action for the workflowclaims",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "currentType",
            "description": "The currentType for the workflowclaims",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowClaim"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/workflows": {
      "get": {
        "tags": [
          "workflows"
        ],
        "summary": "Gets all of the workflowclaims",
        "description": "Returns workflowclaims that are specified by the query string",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "The ID of the workflows",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "title",
            "description": "The title of the workflows",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "version",
            "description": "The version of the workflows",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "The status of the workflows",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "payor",
            "description": "The payor",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Workflow"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/workflowusage": {
      "get": {
        "tags": [
          "workflowusage"
        ],
        "summary": "Get the workflow usage",
        "description": "Use to return the current workflowusage",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowUsage"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": []
}